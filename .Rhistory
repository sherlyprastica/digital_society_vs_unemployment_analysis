## Buat sebuah elemen bertipe <div>
ui <- div(
# 1. Buat input dengan sebuah id
## Buat sebuah elemen bertipe <div>
div("Masukkan Sesuatu"),
## Buat sebuah input bertipe numeric
numericInput("input1", "Input", value = NULL),
# 2. Buat output placeholder dengan sebuah id
br(),
div("Amati Outputnya"),
## Buat sebuah output bertipe text
textOutput("output1"),
# 4. Tambahkan slider input (alternatif 1)
br(),
div("Slider Alternatif 1"),
## Buat sebuah input bertipe slider
sliderInput("slider1", label = "Slider Alt 1", min = 1, max = 10, value = 5),
# 6. Tambahkan slider input via uiOutput (alternatif 2)
br(),
div("Slider Alternatif 2"),
## Buat sebuah output bertipe UI
uiOutput("outputforslider2"),
# 8. Ada banyak tipe output, yang paling sering digunakan:
br(),
div("Tipe output lain"),
## Buat sebuah output bertipe data table
...("tableoutput"),
## Buat sebuah output bertipe plot
...("plotoutput"),
# 10. Output bisa juga berasal dari library
## Buat sebuah output bertipe leaflet
...("leafletoutput"),
)
server <- function (input, output, session) {
# 3. tampilkan output berdarkan input yang diisikan
# Tipe output harus sama dengan render-nya. misalnya textOutput berpasangan dengan renderText
##Render value dari input1 ke output1 bertipe text
output$output1 <- renderText({
input$input1
})
# 5. Update parameter of input using update*
# Contohnya kita gunakan nilai input1 sebagai max
# Agar reactive kita gunakan observe
# observe is experession that automatically re-execute when certain input chan
observe({
if (! is.na(input$input1)) {
## Panggil fungsi untuk mengupdate nilai max dari slider
updateSliderInput(session = session, "slider1", max=input$input1)
}
})
# 7. Buat slider input pada output yang bertipe uiOutput
# Metode ini berguna untuk menampilkan/menghilangkan widget pada kondisi tertentu
# Contohnya kita gunakan nilai input1 sebagai max. Jika input1 kurang dari 10: hilangkan, else:tampilkan
# Agar reactive kita gunakan observe
## Jadikan reactive
...({
if (! is.na(input$input1)) {
## Render ke output bertipe UI
output$outputforslider2 <- renderUI
({
if (input$input1 >= 10) {
## Buat input bertipe slider
sliderInput("slider2", label = "Slider Alt 2", min = 1, max=input$input1, value = 5)
} else {
NULL
}
})
}
})
# 9. Render output lainnya
## Render ke output bertipe data table
output$tableoutput <- ...({
## ambil 50 observasi pertama
diamonds %>% ...(50)
})
## Render ke output bertipe plot
output$plotoutput <- ...({
## buat quick plot
...(cut, data=diamonds)
})
# 11. Render leaflet
## Render ke output bertipe leaflet
output$leafletoutput <- ...({
tsc_ref %>%
...() %>%  ## initiate blank leaflet
...() %>%  ## Add tile: default base map --> openstreet map
# addTiles(urlTemplate = "http://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}") %>%
## Add marker berupa lingkaran dengan radius 1/1000000 dari Confirmed cases
addCircleMarkers(
stroke = FALSE,
fillOpacity = 0.3,
radius = ...,
color = ~pal('Confirmed'),
## Tambahkan popup dari Confirmed
... = paste("Confirmed", ...)
) %>%
## Add marker berupa lingkaran dengan radius 1/1000000 dari Recovered cases
addCircleMarkers(
stroke = FALSE,
fillOpacity = 0.4,
radius = ...,
color = ~pal('Recovered'),
## Tambahkan popup dari Recovered
... = paste("Recovered:", ...)
) %>%
## Add marker berupa lingkaran dengan radius 1/1000000 dari Deaths cases
addCircleMarkers(
stroke = FALSE,
fillOpacity = 0.6,
radius = ...,
color = ~pal('Deaths'),
## Tambahkan popup dari Deaths
... = paste("Deaths:", ...)
) %>%
## Geser view ke lat = -6.200000, lng = 106.816666 dengan zoom 3
...(...) %>%  # optional: if want to focus on certain coordinates
## Tambahkan legenda warna Confirmed Recovered dan Deaths di bottomleft
...("...",
colors = c("navy", "red", "green"),
labels = c("Confirmed", "Deaths", "Recovered"),
title = "Covid-19 Cases as of July 1, 2021",
opacity = 1
)
})
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(leaflet)
library(readr)
tsc_ref <- read_csv('tsc_ref.csv')
ui <- div(
# 1. Buat input dengan sebuah id
div("Masukkan Sesuatu"),
numericInput("input1", "Input", value = NULL),
# 2. Buat output placeholder dengan sebuah id
br(),
div("Amati Outputnya"),
textOutput("output1"),
# 4. Tambahkan slider input (alternatif 1)
br(),
div("Slider Alternatif 1"),
sliderInput("slider1", label = "Slider Alt 1", min = 1, max = 10, value = 5),
# 6. Tambahkan slider input via uiOutput (alternatif 2)
br(),
div("Slider Alternatif 2"),
uiOutput("outputforslider2"),
# 8. Ada banyak tipe output, yang paling sering digunakan:
br(),
div("Tipe output lain"),
dataTableOutput("tableoutput"),
plotOutput("plotoutput"),
# 10. Output bisa juga berasal dari library
leafletOutput("leafletoutput"),
)
server <- function (input, output, session) {
# 3. tampilkan output berdarkan input yang diisikan
# Tipe output harus sama dengan render-nya. misalnya textOutput berpasangan dengan renderText
output$output1 <- renderText({
input$input1
})
# 5. Update parameter of input using update*
# Contohnya kita gunakan nilai input1 sebagai max
# Agar reactive kita gunakan observe
# observe is experession that automatically re-execute when certain input changes.
# jadi observe membuat output reactive terhadap perubahan input.
observe({
if (! is.na(input$input1)) {
updateSliderInput(session = session, "slider1", max = input$input1)
}
})
# 7. Buat slider input pada output yang bertipe uiOutput
# Metode ini berguna untuk menampilkan/menghilangkan widget pada kondisi tertentu
# Contohnya kita gunakan nilai input1 sebagai max. Jika input1 kurang dari 10: hilangkan, else:tampilkan
# Agar reactive kita gunakan observe
observe({
if (! is.na(input$input1)) {
output$outputforslider2 <- renderUI({
if (input$input1 >= 10) {
sliderInput("slider2", label = "Slider Alt 2", min = 1, max = input$input1, value = 5)
} else {
NULL
}
})
}
})
# 9. Render output lainnya
output$tableoutput <- renderDataTable({
diamonds %>% head(50)
})
output$plotoutput <- renderPlot({
qplot(cut, data=diamonds)
})
# 11. Render leaflet
output$leafletoutput <- renderLeaflet({
tsc_ref %>%
leaflet() %>%  # initiate blank leaflet
addTiles() %>%  # default base map --> openstreet map
# addTiles(urlTemplate = "http://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}") %>%
addCircleMarkers(
stroke = FALSE,
fillOpacity = 0.3,
#radius = ~Confirmed/100,
radius = ~Confirmed/1000000,
color = ~pal('Confirmed'),
popup = paste("Confirmed", tsc_ref$Confirmed)
) %>%
addCircleMarkers(
stroke = FALSE,
fillOpacity = 0.4,
#radius = ~Recovered/100,
radius = ~Recovered/1000000,
color = ~pal('Recovered'),
popup = paste("Recovered:", tsc_ref$Recovered)
) %>%
addCircleMarkers(
stroke = FALSE,
fillOpacity = 0.6,
#radius = ~Deaths/100,
radius = ~Deaths/1000000,
color = ~pal('Deaths'),
popup = paste("Deaths:", tsc_ref$Deaths)
) %>%
setView(lat = -6.200000, lng = 106.816666, zoom = 3) %>%  # optional: if want to focus on certain coordinates
addLegend("bottomleft",
colors = c("navy", "red", "green"),
labels = c("Confirmed", "Deaths", "Recovered"),
title = "Covid-19 Cases as of July 1, 2021",
opacity = 1
)
})
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(leaflet)
library(readr)
tsc_ref <- read_csv('tsc_ref.csv')
ui <- div(
# 1. Buat input dengan sebuah id
div("Masukkan Sesuatu"),
numericInput("input1", "Input", value = NULL),
# 2. Buat output placeholder dengan sebuah id
br(),
div("Amati Outputnya"),
textOutput("output1"),
# 4. Tambahkan slider input (alternatif 1)
br(),
div("Slider Alternatif 1"),
sliderInput("slider1", label = "Slider Alt 1", min = 1, max = 10, value = 5),
# 6. Tambahkan slider input via uiOutput (alternatif 2)
br(),
div("Slider Alternatif 2"),
uiOutput("outputforslider2"),
# 8. Ada banyak tipe output, yang paling sering digunakan:
br(),
div("Tipe output lain"),
dataTableOutput("tableoutput"),
plotOutput("plotoutput"),
# 10. Output bisa juga berasal dari library
leafletOutput("leafletoutput"),
)
server <- function (input, output, session) {
# 3. tampilkan output berdarkan input yang diisikan
# Tipe output harus sama dengan render-nya. misalnya textOutput berpasangan dengan renderText
output$output1 <- renderText({
input$input1
})
# 5. Update parameter of input using update*
# Contohnya kita gunakan nilai input1 sebagai max
# Agar reactive kita gunakan observe
# observe is experession that automatically re-execute when certain input changes.
# jadi observe membuat output reactive terhadap perubahan input.
observe({
if (! is.na(input$input1)) {
updateSliderInput(session = session, "slider1", max = input$input1)
}
})
# 7. Buat slider input pada output yang bertipe uiOutput
# Metode ini berguna untuk menampilkan/menghilangkan widget pada kondisi tertentu
# Contohnya kita gunakan nilai input1 sebagai max. Jika input1 kurang dari 10: hilangkan, else:tampilkan
# Agar reactive kita gunakan observe
observe({
if (! is.na(input$input1)) {
output$outputforslider2 <- renderUI({
if (input$input1 >= 10) {
sliderInput("slider2", label = "Slider Alt 2", min = 1, max = input$input1, value = 5)
} else {
NULL
}
})
}
})
# 9. Render output lainnya
output$tableoutput <- renderDataTable({
diamonds %>% head(50)
})
output$plotoutput <- renderPlot({
qplot(cut, data=diamonds)
})
# 11. Render leaflet
output$leafletoutput <- renderLeaflet({
tsc_ref %>%
leaflet() %>%  # initiate blank leaflet
addTiles() %>%  # default base map --> openstreet map
# addTiles(urlTemplate = "http://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}") %>%
addCircleMarkers(
stroke = FALSE,
fillOpacity = 0.3,
#radius = ~Confirmed/100,
radius = ~Confirmed/1000000,
color = ~pal('Confirmed'),
popup = paste("Confirmed", tsc_ref$Confirmed)
) %>%
addCircleMarkers(
stroke = FALSE,
fillOpacity = 0.4,
#radius = ~Recovered/100,
radius = ~Recovered/1000000,
color = ~pal('Recovered'),
popup = paste("Recovered:", tsc_ref$Recovered)
) %>%
addCircleMarkers(
stroke = FALSE,
fillOpacity = 0.6,
#radius = ~Deaths/100,
radius = ~Deaths/1000000,
color = ~pal('Deaths'),
popup = paste("Deaths:", tsc_ref$Deaths)
) %>%
setView(lat = -6.200000, lng = 106.816666, zoom = 3) %>%  # optional: if want to focus on certain coordinates
addLegend("bottomleft",
colors = c("navy", "red", "green"),
labels = c("Confirmed", "Deaths", "Recovered"),
title = "Covid-19 Cases as of July 1, 2021",
opacity = 1
)
})
}
shinyApp(ui, server)
setwd("D:/Berkas Penting/Course/Tetris/R/project/day 6")
#load data--------------------------------------------------------------------------------------------
jumlah_penduduk <- read.csv('https://raw.githubusercontent.com/sherlyprastica/digital_society_vs_unemployment_analysis/main/jumlah_penduduk_fix.csv')
sepuluh_tahun_trakhir <- jumlah_penduduk %>% filter(between(`ï..Tahun`,2011, 2020))
#load data--------------------------------------------------------------------------------------------
jumlah_penduduk <- read.csv('./jumlah_penduduk_fix.csv')
setwd("D:/Berkas Penting/Course/Tetris/Capstone/project/final_capstone/data_csv")
#load data--------------------------------------------------------------------------------------------
jumlah_penduduk <- read.csv('./jumlah_penduduk_fix.csv')
sepuluh_tahun_trakhir <- jumlah_penduduk %>% filter(between(`?..Tahun`,2011, 2020))
head(jumlah_penduduk)
#load data--------------------------------------------------------------------------------------------
jumlah_penduduk <- read.csv('./jumlah_penduduk_fix.csv')
sepuluh_tahun_trakhir <- jumlah_penduduk %>% filter(between(`ï..Tahun`,2011, 2020))
head(jumlah_penduduk)
tsc_ref <- read_csv('tsc_ref.csv')
#load data--------------------------------------------------------------------------------------------
jumlah_penduduk <- read_xlsx('./jumlah_penduduk_fix.xlsx')
sepuluh_tahun_trakhir <- jumlah_penduduk %>% filter(between(`ï..Tahun`,2011, 2020))
head(jumlah_penduduk)
viz <- ggplot(data = sepuluh_tahun_trakhir, aes(`Tahun`)) + scale_x_continuous(breaks = c(2011:2020)) + geom_col(aes(y=Jumlah_Penduduk), color="black", fill="lightblue")
viz <- viz + geom_text(aes(y=Jumlah_Penduduk, label=Jumlah_Penduduk), position=position_dodge(width=1), vjust=-1)
viz <- viz + geom_col(aes(y=Pengguna_Internet), color="black", fill="black")
viz <- viz + scale_y_continuous(sec.axis = sec_axis(~., name = "User Internet"))
viz <- viz + geom_text(aes(y=Pengguna_Internet, label=sprintf("%1.1f%%", (Pengguna_Internet/Jumlah_Penduduk)*100)), position=position_dodge(width=1), vjust=-1)
viz <- viz + labs(x="Tahun", y="Jumlah Penduduk", title="Banyak Pengguna Internet Terhadap Populasi Masyarakat Indonesia pada Tahun 2011-2020")
viz <- viz + theme(axis.text.y = element_text(hjust = 0.5, size=8), axis.text.x = element_text(hjust = 0.5, size=15), plot.title = element_text(hjust = 0.5, vjust = 1))
viz <- ggplotly(viz)
viz
#load data--------------------------------------------------------------------------------------------
jumlah_penduduk <- read_xlsx('./jumlah_penduduk_fix.xlsx')
sepuluh_tahun_trakhir <- jumlah_penduduk %>% filter(between(`Tahun`,2011, 2020))
viz <- ggplot(data = sepuluh_tahun_trakhir, aes(`Tahun`)) + scale_x_continuous(breaks = c(2011:2020)) + geom_col(aes(y=Jumlah_Penduduk), color="black", fill="lightblue")
viz <- viz + geom_text(aes(y=Jumlah_Penduduk, label=Jumlah_Penduduk), position=position_dodge(width=1), vjust=-1)
viz <- viz + geom_col(aes(y=Pengguna_Internet), color="black", fill="black")
viz <- viz + scale_y_continuous(sec.axis = sec_axis(~., name = "User Internet"))
viz <- viz + geom_text(aes(y=Pengguna_Internet, label=sprintf("%1.1f%%", (Pengguna_Internet/Jumlah_Penduduk)*100)), position=position_dodge(width=1), vjust=-1)
viz <- viz + labs(x="Tahun", y="Jumlah Penduduk", title="Banyak Pengguna Internet Terhadap Populasi Masyarakat Indonesia pada Tahun 2011-2020")
viz <- viz + theme(axis.text.y = element_text(hjust = 0.5, size=8), axis.text.x = element_text(hjust = 0.5, size=15), plot.title = element_text(hjust = 0.5, vjust = 1))
viz <- ggplotly(viz)
viz
pengangguran <- read_xlsx("./fix_pengangguran.xlsx")
names(pengangguran) <- make.names(names(pengangguran))
pengangguran <- pengangguran %>% filter(Jumlah.Pengangguran > 0)
mean_pengangguran <- pengangguran %>% select(`Tahun`, Jumlah.Pengangguran) %>% mutate(rata_pengangguran = mean(Jumlah.Pengangguran))
viz4 <- ggplot(data=pengangguran, aes(x=`Tahun`, y=Jumlah.Pengangguran)) + geom_line() + geom_line(data=mean_pengangguran, aes(y=rata_pengangguran), color="red")
viz4 <- viz4 + labs(y="Jumlah Pengangguran", title="Grafik Jumlah Pengangguran di Indonesia Tahun 1990-2020") + theme(plot.title = element_text(hjust = 0.5, vjust = 1))
viz4 <- viz4 + theme(axis.text.y = element_text(hjust = 0.5, size=8), axis.text.x = element_text(hjust = 0.5, size=15), plot.title = element_text(hjust = 0.5, vjust = 1))
viz4 <- ggplotly(viz4)
viz4
user_internet_umur <- read_xlsx('pengguna internet berdasarkan umur.xlsx')
user_internet_umur <- user_internet_umur %>% select(`?..Umur`, mean)
user_internet_umur <- user_internet_umur %>% select(`Umur`, mean)
user_internet_umur <- read_xlsx('pengguna internet berdasarkan umur.xlsx')
user_internet_umur <- user_internet_umur %>% select(`Umur`, mean)
viz3 <- ggplot(data=user_internet_umur, aes(x="", y=mean, fill=`Umur`))
viz3 <- viz3 + geom_bar(width = 1, stat = "identity")
viz3 <- viz3 + coord_polar("y", start=0)
viz3 <- viz3 + geom_label_repel(data = df, aes(y = pos, label = sprintf("%1.1f%%", mean)), size = 8, nudge_x = 1, show.legend = FALSE)
viz3 <- viz3 + theme(axis.text.x=element_blank()) + blank_theme
viz3 <- viz3 + labs(title = "Rata-rata Pengguna Internet Berdasarkan Umur") + theme(plot.title = element_text(hjust = 0.5, vjust = 1))
viz3
viz3 <- ggplot(data=user_internet_umur, aes(x="", y=mean, fill=`Umur`))
viz3 <- viz3 + geom_bar(width = 1, stat = "identity")
viz3 <- viz3 + coord_polar("y", start=0)
viz3 <- viz3 + geom_label_repel(data = df, aes(y = pos, label = sprintf("%1.1f%%", mean)), size = 8, nudge_x = 1, show.legend = FALSE)
viz3 <- viz3 + theme(axis.text.x=element_blank()) + blank_theme
viz3 <- viz3 + labs(title = "Rata-rata Pengguna Internet Berdasarkan Umur") + theme(plot.title = element_text(hjust = 0.5, vjust = 1))
viz3
user_internet_umur <- read_xlsx('pengguna internet berdasarkan umur.xlsx')
user_internet_umur <- user_internet_umur %>% select(`Umur`, mean)
library(shiny)
library(dplyr)
library(readxl)
library(shinythemes)
library(shinydashboard)
library(ggplot2)
library(plotly)
library(scales)
library(ggrepel)
library(tidyverse)
library(tidyr)
library(raster)
library(sf)
library(rsconnect)
require(maps)
require(viridis)
theme_set(
theme_void()
)
df <- user_internet_umur %>% mutate(csum = rev(cumsum(rev(mean))), pos = mean/1 + lead(csum, 1),pos = if_else(is.na(pos), mean/3, pos))
#blank theme
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
viz3 <- ggplot(data=user_internet_umur, aes(x="", y=mean, fill=`Umur`))
viz3 <- viz3 + geom_bar(width = 1, stat = "identity")
viz3 <- viz3 + coord_polar("y", start=0)
viz3 <- viz3 + geom_label_repel(data = df, aes(y = pos, label = sprintf("%1.1f%%", mean)), size = 8, nudge_x = 1, show.legend = FALSE)
viz3 <- viz3 + theme(axis.text.x=element_blank()) + blank_theme
viz3 <- viz3 + labs(title = "Rata-rata Pengguna Internet Berdasarkan Umur") + theme(plot.title = element_text(hjust = 0.5, vjust = 1))
viz3
#load data pengguna internet
internet_user <- read_xlsx("./persebaran_pengguna_internet_fix_202203161536.xlsx")
#load data pengguna internet
internet_user <- read_xlsx("./persebaran_pengguna_internet_fix_202203161536.xlsx")
head(internet_user)
internet_user <- internet_user %>% mutate(persentase_2015 = (`2015_fix`/jumlah_penduduk_2015)*100, persentase_2016 = (`2016_fix`/jumlah_penduduk_2016)*100, persentase_2017 = (`2017_fix`/jumlah_penduduk_2017)*100, persentase_2018 = (`2018_fix`/jumlah_penduduk_2018)*100, persentase_2019 = (`2019_fix`/jumlah_penduduk_2019)*100, persentase_2020 = (`2020_fix`/jumlah_penduduk_2020)*100)
internet_user <- internet_user %>% rename(NAME_1=?..NAME_1)
internet_user <- internet_user %>% mutate(persentase_2015 = (`2015_fix`/jumlah_penduduk_2015)*100, persentase_2016 = (`2016_fix`/jumlah_penduduk_2016)*100, persentase_2017 = (`2017_fix`/jumlah_penduduk_2017)*100, persentase_2018 = (`2018_fix`/jumlah_penduduk_2018)*100, persentase_2019 = (`2019_fix`/jumlah_penduduk_2019)*100, persentase_2020 = (`2020_fix`/jumlah_penduduk_2020)*100)
peta_dunia <- map_data('world')
ggplot(peta_dunia, aes(x=long, y=lat, group=group)) + geom_polygon(fill='lightgray', colour='white')
#show indonesian map
peta_indonesia <- map_data('world', region = 'Indonesia')
indonesia_map <- ggplot(peta_indonesia, aes(x=long, y=lat, group=group)) + geom_polygon(fill='lightgray', colour='white')
# Indonesia terletak antara 6? LU - 11? LS dan 95? BT - 141? BT.
indonesia_map <- ggplot(peta_dunia, aes(x=long, y=lat, group=group)) + geom_polygon(fill='lightgray', colour='white') + xlim(95, 141) + ylim(-11, 6)
#memotong berdasar provinsi
indonesia1 <- getData('GADM', country='IDN', level=1)
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1A <- fortify(ind1)
warna <- rainbow(length(unique(ind1A$id)))
ggplot(peta_indonesia, aes(x=long, y=lat, group=group)) + geom_polygon(data=ind1A, aes(x=long, y=lat, group=group, fill=id), color='grey')
ind1@data$id <- rownames(ind1@data)
ind1B <- plyr::join(ind1A, ind1@data, by="id")
ind2B <- plyr::join(ind1B, internet_user, by="NAME_1")
viz_map <- ggplot(peta_indonesia, aes(x=long, y=lat, group=group)) + geom_polygon(data=ind2B, aes(x=long, y=lat, group=group, fill=`persentase_2020`), color='grey') + labs(title="Peta Persebaran Pengguna Internet di Indonesia pada Tahun 2020")
viz_map <- ggplotly(viz_map)
viz_map
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1A <- fortify(ind1)
ggplot(peta_dunia, aes(x=long, y=lat, group=group)) + geom_polygon(fill='lightgray', colour='white')
#show indonesian map
peta_indonesia <- map_data('world', region = 'Indonesia')
indonesia_map <- ggplot(peta_indonesia, aes(x=long, y=lat, group=group)) + geom_polygon(fill='lightgray', colour='white')
# Indonesia terletak antara 6? LU - 11? LS dan 95? BT - 141? BT.
indonesia_map <- ggplot(peta_dunia, aes(x=long, y=lat, group=group)) + geom_polygon(fill='lightgray', colour='white') + xlim(95, 141) + ylim(-11, 6)
#memotong berdasar provinsi
indonesia1 <- getData('GADM', country='IDN', level=1)
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1A <- fortify(ind1)
warna <- rainbow(length(unique(ind1A$id)))
ggplot(peta_indonesia, aes(x=long, y=lat, group=group)) + geom_polygon(data=ind1A, aes(x=long, y=lat, group=group, fill=id), color='grey')
ind1@data$id <- rownames(ind1@data)
ind1B <- plyr::join(ind1A, ind1@data, by="id")
ind2B <- plyr::join(ind1B, internet_user, by="NAME_1")
viz_map <- ggplot(peta_indonesia, aes(x=long, y=lat, group=group)) + geom_polygon(data=ind2B, aes(x=long, y=lat, group=group, fill=`persentase_2020`), color='grey') + labs(title="Peta Persebaran Pengguna Internet di Indonesia pada Tahun 2020")
viz_map <- ggplotly(viz_map)
viz_map
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1A <- fortify(ind1)
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
#memotong berdasar provinsi
indonesia1 <- getData('GADM', country='IDN', level=1)
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1A <- fortify(ind1)
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
#memotong berdasar provinsi
indonesia1 <- getData('GADM', country='IDN', level=1)
ind1 <- readRDS('gadm36_IDN_1_sp.rds')
